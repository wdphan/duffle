import React, { ReactNode } from 'react';
import { CustomTheme, Languages, Mode, Theme } from '../types';
export declare const routes: {
    ONBOARDING: string;
    ABOUT: string;
    CONNECTORS: string;
    MOBILECONNECTORS: string;
    CONNECT: string;
    DOWNLOAD: string;
    PROFILE: string;
    SWITCHNETWORKS: string;
};
declare type Connector = any;
declare type Error = string | React.ReactNode | null;
declare type ContextValue = {
    theme: Theme;
    setTheme: React.Dispatch<React.SetStateAction<Theme>>;
    mode: Mode;
    setMode: React.Dispatch<React.SetStateAction<Mode>>;
    customTheme: CustomTheme | undefined;
    setCustomTheme: React.Dispatch<React.SetStateAction<CustomTheme | undefined>>;
    lang: Languages;
    setLang: React.Dispatch<React.SetStateAction<Languages>>;
    open: boolean;
    setOpen: React.Dispatch<React.SetStateAction<boolean>>;
    route: string;
    setRoute: React.Dispatch<React.SetStateAction<string>>;
    connector: string;
    setConnector: React.Dispatch<React.SetStateAction<Connector>>;
    errorMessage: Error;
    options?: ConnectKitOptions;
    debug: (message: string | React.ReactNode | null, code?: any) => void;
};
declare type ConnectKitOptions = {
    language?: Languages;
    hideTooltips?: boolean;
    hideQuestionMarkCTA?: boolean;
    hideNoWalletCTA?: boolean;
    avoidLayoutShift?: boolean;
    embedGoogleFonts?: boolean;
    truncateLongENSAddress?: boolean;
    walletConnectName?: string;
    reducedMotion?: boolean;
    disclaimer?: ReactNode | string;
    bufferPolyfill?: boolean;
};
declare type ConnectKitProviderProps = {
    children?: React.ReactNode;
    theme?: Theme;
    mode?: Mode;
    customTheme?: CustomTheme | undefined;
    options?: ConnectKitOptions;
};
export declare const ConnectKitProvider: React.FC<ConnectKitProviderProps>;
export declare const useContext: () => ContextValue;
export declare const useModal: () => {
    open: boolean;
    setOpen: (show: boolean) => void;
};
export {};
