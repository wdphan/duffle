import { ReadContractsConfig, ReadContractsResult } from '@wagmi/core';
import { ContractsConfig } from '@wagmi/core/internal';
import { Abi } from 'abitype';
import { InfiniteQueryConfig } from '../../types';
import { UseInfiniteQueryResult } from '../utils';
export declare type UseContractInfiniteReadsConfig<TContracts extends unknown[] = unknown[], TPageParam = unknown> = Pick<ReadContractsConfig<TContracts>, 'allowFailure' | 'overrides'> & {
    cacheKey: string;
    contracts(pageParam: TPageParam): readonly [
        ...ContractsConfig<TContracts, {
            /** Chain id to use for provider */
            chainId?: number;
        }>
    ];
} & InfiniteQueryConfig<ReadContractsResult<TContracts>, Error>;
export declare function useContractInfiniteReads<TAbi extends Abi | readonly unknown[], TFunctionName extends string, TContracts extends {
    abi: TAbi;
    functionName: TFunctionName;
}[], TPageParam = any>({ allowFailure, cacheKey, cacheTime, contracts, enabled: enabled_, getNextPageParam, isDataEqual, keepPreviousData, onError, onSettled, onSuccess, overrides, scopeKey, select, staleTime, suspense, }: UseContractInfiniteReadsConfig<TContracts, TPageParam>): UseInfiniteQueryResult<ReadContractsResult<TContracts>, Error>;
export declare function paginatedIndexesConfig<TAbi extends Abi | readonly unknown[], TFunctionName extends string, TContracts extends {
    abi: TAbi;
    functionName: TFunctionName;
}[]>(fn: UseContractInfiniteReadsConfig<TContracts>['contracts'], { perPage, start, direction, }: {
    perPage: number;
    start: number;
    direction: 'increment' | 'decrement';
}): {
    contracts: UseContractInfiniteReadsConfig<TContracts>['contracts'];
    getNextPageParam: InfiniteQueryConfig<unknown[], Error>['getNextPageParam'];
};
