import { ReadContractsConfig, ReadContractsResult } from '@wagmi/core';
import { Abi } from 'abitype';
import { QueryConfig } from '../../types';
import { UseQueryResult } from '../utils';
export declare type UseContractReadsConfig<TContracts extends unknown[]> = ReadContractsConfig<TContracts, {
    isAbiOptional: true;
    isAddressOptional: true;
    isArgsOptional: true;
    isContractsOptional: true;
    isFunctionNameOptional: true;
}> & QueryConfig<ReadContractsResult<TContracts>, Error> & {
    /** If set to `true`, the cache will depend on the block number */
    cacheOnBlock?: boolean;
    /** Subscribe to changes */
    watch?: boolean;
};
export declare function useContractReads<TAbi extends Abi | readonly unknown[], TFunctionName extends string, TContracts extends {
    abi: TAbi;
    functionName: TFunctionName;
}[]>({ allowFailure, cacheOnBlock, cacheTime, scopeKey, contracts, overrides, enabled: enabled_, isDataEqual, keepPreviousData, onError, onSettled, onSuccess, select, staleTime, suspense, watch, }?: UseContractReadsConfig<TContracts>): UseQueryResult<ReadContractsResult<TContracts>, Error>;
